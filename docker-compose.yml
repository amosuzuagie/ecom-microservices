services:
  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      POSTGRES_USER: mstra
      POSTGRES_PASSWORD: mstra
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init-multi-db.sql:/docker-entrypoint-initdb.d/init.sql # auto generate database
    ports:
      - "5433:5432"
    networks:
      - econ-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - econ-network
    restart: unless-stopped

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3.1
    ports:
      - "8443:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command:
      [ "start-dev" ]
    networks:
      - econ-network

  mongo:
    image: mongodb/mongodb-community-server:latest
    container_name: mongo
    ports:
      - "27018:27017"
    networks:
      - econ-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: mstra
      RABBITMQ_DEFAULT_PASS: mstra
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management console UI
    depends_on:
      - zookeeper
    networks:
      - econ-network
    restart: unless-stopped

  eureka:
    build: ./eureka
    container_name: eureka
    ports:
      - "8761:8761"
    networks:
      - econ-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  configserver:
    build: ./configserver
    container_name: configserver
    ports:
      - "8888:8888"
    depends_on:
      - eureka
    networks:
      - econ-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=/config
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./configserver/src/main/resources/config:/config

  gateway-service:
    build: ./gateway
    container_name: gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://configserver:8888
    ports:
      - "8080:8080"
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - configserver
    networks:
      - econ-network

  user-service:
    build: ./user
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://configserver:8888
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
      - MONGO_DB=${MONGO_DB}
    ports:
      - "8082:8082"
    depends_on:
      - eureka
      - mongo
      - keycloak
      - rabbitmq
      - configserver
    networks:
      - econ-network

  product-service:
    build: ./product
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://configserver:8888
      - POSTGRE_DB=${PRODUCT_DB}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
    ports:
      - "8081:8081"
    depends_on:
      - eureka
      - mongo
      - keycloak
      - rabbitmq
      - configserver
    networks:
      - econ-network

  order-service:
    build: ./order
    container_name: order-service
    ports:
      - "8083:8083"
    environment:
      - ORDER_DB=${ORDER_DB}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - SPRING_PROFILES_ACTIVE=docker
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
      - SPRING_CONFIG_IMPORT=optional:configserver:http://configserver:8888
    depends_on:
      - eureka
      - mongo
      - keycloak
      - rabbitmq
      - configserver
    networks:
      - econ-network

  notification-service:
    build: ./notification
    container_name: notification
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
    ports:
      - 8084
    depends_on:
      - rabbitmq
    networks:
      - econ-network

networks:
  econ-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:

#services:
#  mysql:
#    container_name: mysql_container
#    image: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: mstra
#      MYSQL_DATABASE: mstra
#      MYSQL_USER: mstra
#      MYSQL_PASSWORD: mstra
#    volumes:
#      - mysql_data:/var/lib/mysql
#    ports:
#      - "3307:3306"
#    networks:
#      - mysql
#    restart: unless-stopped
#  phpmyadmin:
#    container_name: phpmyadmin_container
#    image: phpmyadmin/phpmyadmin
#    environment:
#      PMA_HOST: mysql
#      PMA_PORT: 3306
#      MYSQL_ROOT_PASSWORD: mstra
#    ports:
#      - "8484:80"
#    networks:
#      - mysql
#    restart: unless-stopped
#
#networks:
#  mysql:
#    driver: bridge
#
#volumes:
#  mysql_data: